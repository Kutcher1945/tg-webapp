import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(storage=MemoryStorage())

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã\n\n"
        "–Ø ‚Äî –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –î–∞—Ç–∞ –ò–Ω–∂–µ–Ω–µ—Ä–æ–≤ –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¶–µ–Ω—Ç—Ä–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é Telegram (–≤–Ω–∏–∑—É), —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É."
    )

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —á–µ—Ä–µ–∑ window.Telegram.WebApp.sendData)
@dp.message()
async def handle_web_app_data(message: Message):
    if message.web_app_data:
        await message.answer(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp:\n<code>{message.web_app_data.data}</code>")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é Telegram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

# üîÅ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
